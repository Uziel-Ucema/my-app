<!DOCTYPE html>
<html>
<head>
    <title>Images from Google Cloud Storage</title>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }

        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0px 0px 10px 0px #ccc;
        }

        h1 {
            text-align: center;
        }

        .folder {
            margin-top: 20px;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
        }

        .folder h2 {
            font-size: 24px;
        }

        .image-col {
            text-align: center;
            margin-top: 10px;
        }

        .image-col img {
            max-width: 100%;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .image-info p {
            margin: 5px 0;
            font-size: 16px;
        }

        /* New styles for the alert subscription section */
        .alert-subscription {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .save-changes-btn {
            margin-top: 10px;
        }

        .folder-list {
            list-style: none;
            padding: 0;
            display: flex;
            flex-wrap: wrap;
        }

        .folder-list-item {
            margin-right: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="mt-5">Images from Google Cloud Storage</h1>
        <div id="imageContainer" class="row"></div>
    </div>

    <script>
    const bucketName = 'primero1023';
    const apiUrl = `https://storage.googleapis.com/storage/v1/b/${bucketName}/o`;
  
    async function fetchImageData() {
      const response = await fetch(apiUrl);
      return response.json();
    }
  
    function groupItemsByFolder(data) {
      const itemsByFolder = {};
  
      data.items.forEach(item => {
        const pathSegments = item.name.split('/');
        const folderName = pathSegments[0];
  
        if (!itemsByFolder[folderName]) {
          itemsByFolder[folderName] = [];
        }
  
        itemsByFolder[folderName].push(item);
      });
  
      return itemsByFolder;
    }
  
    function createImageElement(item) {
      const col = document.createElement('div');
      col.classList.add('col-md-4', 'image-col');
  
      const img = document.createElement('img');
      img.src = item.mediaLink; // The URL of the image in the bucket.
      img.classList.add('img-fluid');
      col.appendChild(img);
  
      const imageInfo = document.createElement('div');
      imageInfo.classList.add('image-info');
  
      const name = document.createElement('p');
      name.innerText = 'Image Name: ' + item.name;
      imageInfo.appendChild(name);
  
      const date = document.createElement('p');
      date.innerText = 'Submitted Date: ' + new Date(item.timeCreated).toDateString();
      imageInfo.appendChild(date);
  
      col.appendChild(imageInfo);
  
      return col;
    }
  
    function renderImagesByFolder(itemsByFolder) {
      const imageContainer = document.getElementById('imageContainer');
  
      for (const folderName in itemsByFolder) {
        if (itemsByFolder.hasOwnProperty(folderName)) {
          const folderSection = document.createElement('div');
          folderSection.classList.add('folder');
          folderSection.innerHTML = `<h2>${folderName}</h2>`;
  
          const row = document.createElement('div');
          row.classList.add('row');
  
          itemsByFolder[folderName].forEach(item => {
            if (item.contentType === 'image/jpeg') {
              const col = createImageElement(item);
              row.appendChild(col);
            }
          });
  
          folderSection.appendChild(row);
          imageContainer.appendChild(folderSection);
        }
      }
    }
  
    function handleImageFetchError(error) {
      console.error('Error fetching image data: ', error);
    }
  
    async function initialize() {
      try {
        const imageData = await fetchImageData();
        const itemsByFolder = groupItemsByFolder(imageData);
        renderImagesByFolder(itemsByFolder);
      } catch (error) {
        handleImageFetchError(error);
      }
    }
  
    initialize();
</script>
  